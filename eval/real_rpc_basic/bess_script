import scapy.all as scapy

print 'Adding sink'
sink = Sink()

print 'Adding ports and inc/out modules'
# runtime 1:
# iport_mac: 52:54:01:00:00:01
# oport_mac: 52:54:01:00:00:02
# cport_mac: 52:54:01:00:00:03
rt1_iport = ZeroCopyVPort(name='rt1_iport')
rt1_oport = ZeroCopyVPort(name='rt1_oport')
rt1_cport = ZeroCopyVPort(name='rt1_cport')

rt1_iport_portout::PortOut(port=rt1_iport)
rt1_oport_portinc::PortInc(port=rt1_oport)
rt1_cport_portinc::PortInc(port=rt1_cport)
rt1_cport_portout::PortOut(port=rt1_cport)

# runtime 2:
# iport_mac: 52:54:02:00:00:01
# oport_mac: 52:54:02:00:00:02
# cport_mac: 52:54:02:00:00:03
rt2_iport = ZeroCopyVPort(name='rt2_iport')
rt2_oport = ZeroCopyVPort(name='rt2_oport')
rt2_cport = ZeroCopyVPort(name='rt2_cport')

rt2_iport_portout::PortOut(port=rt2_iport)
rt2_oport_portinc::PortInc(port=rt2_oport)
rt2_cport_portinc::PortInc(port=rt2_cport)
rt2_cport_portout::PortOut(port=rt2_cport)

# runtime 3:
# iport_mac: 52:54:03:00:00:01
# oport_mac: 52:54:03:00:00:02
# cport_mac: 52:54:03:00:00:03
rt3_iport = ZeroCopyVPort(name='rt3_iport')
rt3_oport = ZeroCopyVPort(name='rt3_oport')
rt3_cport = ZeroCopyVPort(name='rt3_cport')

rt3_iport_portout::PortOut(port=rt3_iport)
rt3_oport_portinc::PortInc(port=rt3_oport)
rt3_cport_portinc::PortInc(port=rt3_cport)
rt3_cport_portout::PortOut(port=rt3_cport)

print 'Adding dp/cp l2forward'
dp_l2forward = L2Forward()
cp_l2forward = L2Forward()

print 'Adding dp/cp connections'
rt1_oport_portinc -> dp_l2forward
dp_l2forward:0 -> rt2_iport_portout
dp_l2forward:1 -> rt3_iport_portout

rt1_cport_portinc -> cp_l2forward
rt2_cport_portinc -> cp_l2forward
rt3_cport_portinc -> cp_l2forward

cp_l2forward:0 -> rt1_cport_portout
cp_l2forward:1 -> rt2_cport_portout
cp_l2forward:2 -> rt3_cport_portout

print 'Adding sink connection'
rt2_oport_portinc -> sink;
rt3_oport_portinc -> sink;

ret = dp_l2forward.add([{'addr':'52:54:02:00:00:01', 'gate':0},
                        {'addr':'52:54:03:00:00:01', 'gate':1}])
assert ret is None, 'Incorrect response'
print 'adding dp_l2forward rule ok'

ret = cp_l2forward.add([{'addr':'52:54:01:00:00:03', 'gate':0},
                        {'addr':'52:54:02:00:00:03', 'gate':1},
                        {'addr':'52:54:03:00:00:03', 'gate':2}])
assert ret is None, 'Incorrect response'
print 'adding cp_l2forward rule ok'

print 'Adding traffic generator'
pkt_size = int($SN_PKT_SIZE!'60')
assert(60 <= pkt_size <= 1522)
eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip = scapy.IP(src='10.0.0.1', dst='10.0.0.2')   # dst IP is overwritten
tcp = scapy.TCP(sport=10001, dport=10002)
payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/tcp)]
pkt = eth/ip/tcp/payload
pkt_data = bytearray(str(pkt))
fg::FlowGen(template=pkt_data, pps=1e6, flow_rate = 1e4, flow_duration = 10.0, \
            arrival='exponential', duration='pareto', quick_rampup=1) -> rt1_iport_portout
